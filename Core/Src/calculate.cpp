#include <calculate.h>
#include <math.h>
#include <stddef.h>
#include <stdio.h>

const float table[61][11] = {
    {6039, 6033, 5983, 5934, 5885, 5837, 5789, 5741, 5694, 5947, 5600},
    {5597, 5554, 5508, 5463, 5418, 5372, 5328, 5283, 5240, 5196, 5153},
    {5150, 5111, 5068, 5026, 4983, 4942, 4900, 4860, 4819, 4779, 4738},
    {4735, 4699, 4659, 4621, 4581, 4543, 4505, 4467, 4429, 4392, 4355},
    {4351, 4318, 4281, 4246, 4209, 4174, 4138, 4104, 4069, 4035, 4000},
    {3997, 3965, 3932, 3898, 3865, 3832, 3800, 3767, 3734, 3703, 3671},
    {3668, 3640, 3608, 3577, 3547, 3516, 3486, 3456, 3426, 3397, 3367},
    {3365, 3339, 3309, 3280, 3253, 3224, 3196, 3169, 3141, 3114, 3087},
    {3085, 3060, 3034, 3007, 2980, 2955, 2929, 2903, 2878, 2852, 2827},
    {2825, 2803, 2778, 2753, 2730, 2706, 2681, 2658, 2635, 2611, 2588},
    {2587, 2566, 2543, 2520, 2498, 2476, 2454, 2432, 2411, 2389, 2367},
    {2366, 2346, 2326, 2305, 2284, 2264, 2244, 2224, 2203, 2184, 2165},
    {2163, 2145, 2125, 2107, 2088, 2069, 2050, 2032, 2014, 1995, 1977},
    {1976, 1960, 1942, 1924, 1906, 1889, 1873, 1855, 1838, 1821, 1805},
    {1804, 1789, 1772, 1756, 1740, 1725, 1709, 1693, 1677, 1661, 1647},
    {1646, 1632, 1617, 1601, 1587, 1573, 1558, 1543, 1529, 1515, 1501},
    {1500, 1487, 1473, 1460, 1446, 1432, 1420, 1406, 1393, 1380, 1367},
    {1366, 1354, 1342, 1330, 1317, 1305, 1292, 1280, 1269, 1257, 1245},
    {1243, 1233, 1221, 1209, 1198, 1187, 1176, 1165, 1154, 1143, 1132},
    {1131, 1121, 1111, 1100, 1090, 1079, 1069, 1059, 1048, 1038, 1029},
    {1028, 1019, 1009, 1000, 990.1, 981, 971.6, 962.3, 953, 943.9, 934.8},
    {934.0, 925.9, 916.9, 908.1, 899.3, 890.6, 882, 873.4, 865.1, 856.7, 848.4},
    {847.6, 840.2, 832, 823.9, 815.9, 807.9, 800.1, 792.3, 784.6, 776.9, 769.3},
    {768.6, 761.8, 754.3, 747, 739.6, 732.4, 725.2, 718.1, 711, 703.9, 697},
    {696.4, 690.2, 683.4, 676.6, 670, 663.4, 656.8, 650.2, 643.8, 637.4, 631.1},
    {630.5, 624.9, 618.7, 612.4, 606.4, 600.3, 594.4, 588.5, 582.5, 576.7, 570.9},
    {570.4, 565.3, 559.5, 553.9, 548.4, 542.8, 537.4, 532, 526.7, 521.3, 516.1},
    {515.6, 510.9, 505.7, 500.6, 495.4, 490.5, 485.5, 480.6, 475.7, 470.9, 466},
    {465.6, 461.3, 456.7, 452, 447.4, 442.8, 438.3, 433.8, 429.3, 425, 420.6},
    {420.2, 416.3, 412, 407.8, 403.6, 399.4, 395.3, 391.2, 387.2, 383.2, 379.3},
    {378.9, 375.3, 371.5, 367.6, 363.8, 360, 356.3, 352.5, 348.9, 345.2, 341.7},
    {341.3, 338.1, 334.6, 331.1, 327.5, 324.2, 320.7, 317.4, 314.1, 310.8, 307.5},
    {307.2, 304.2, 301.1, 297.9, 294.8, 291.6, 288.5, 285.5, 282.5, 279.5, 276.5},
    {276.2, 273.6, 270.7, 267.8, 265, 262.2, 259.3, 256.6, 253.9, 251.1, 248.5},
    {248.2, 245.8, 243.1, 240.6, 238, 235.4, 232.9, 230.4, 227.9, 225.5, 223.0},
    {222.8, 220.6, 218.3, 215.9, 213.5, 211.3, 209, 206.7, 204.4, 202.3, 200},
    {199.8, 197.8, 195.8, 193.6, 191.5, 189.3, 187.4, 185.3, 183.2, 181.2, 179.3},
    {179.0, 177.3, 175.3, 173.4, 171.5, 169.6, 167.7, 165.9, 164.1, 162.3, 160.5},
    {160.3, 158.7, 157, 155.2, 153.5, 151.7, 150, 148.4, 146.8, 145.1, 143.5},
    {143.4, 142, 140.4, 138.8, 137.2, 135.6, 134.2, 132.7, 131.2, 129.7, 128.2},
    {128.1, 126.8, 125.4, 124, 122.5, 121.1, 119.8, 118.5, 117.1, 115.8, 114.5},
    {114.3, 113.1, 111.8, 110.6, 109.4, 108.1, 106.9, 105.6, 104.4, 103.3, 102.1},
    {101.9, 100.9, 99.7, 98.65, 97.52, 96.4, 95.29, 94.2, 93.11, 92.08, 90.98},
    {90.85, 89.93, 88.88, 87.86, 86.84, 85.83, 84.85, 83.86, 82.88, 81.92, 80.97},
    {80.86, 80.03, 79.09, 78.17, 77.27, 76.36, 75.47, 74.58, 73.71, 72.84, 71.99},
    {71.90, 71.15, 70.31, 69.49, 68.67, 67.86, 67.06, 66.27, 65.48, 64.71, 63.94},
    {63.86, 63.19, 62.44, 61.7, 60.97, 60.24, 59.53, 58.82, 58.11, 57.42, 56.73},
    {56.65, 56.05, 55.39, 54.72, 54.07, 53.42, 52.77, 52.14, 51.52, 50.9, 50.29},
    {50.21, 49.67, 49.08, 48.49, 47.9, 47.32, 46.75, 46.18, 45.62, 45.06, 44.52},
    {44.46, 43.98, 43.45, 42.91, 42.39, 41.88, 41.36, 40.86, 40.36, 39.86, 39.38},
    {39.31, 38.89, 38.41, 37.94, 37.47, 37.01, 36.55, 36.1, 35.66, 35.22, 34.79},
    {34.73, 34.35, 33.93, 33.5, 33.09, 32.69, 32.27, 31.88, 31.48, 31.09, 30.69},
    {30.65, 30.32, 29.93, 29.56, 29.19, 28.83, 28.46, 28.1, 27.75, 27.4, 27.05},
    {27.01, 26.71, 26.38, 26.05, 25.72, 25.39, 25.07, 24.75, 24.44, 24.13, 23.82},
    {23.78, 23.51, 23.22, 22.93, 22.64, 22.34, 22.05, 21.78, 21.5, 21.22, 20.95},
    {20.92, 20.68, 20.41, 20.16, 19.89, 19.63, 19.39, 19.13, 18.88, 18.64, 18.4},
    {18.37, 18.16, 17.93, 17.7, 17.46, 17.24, 17.02, 16.79, 16.57, 16.36, 16.14},
    {16.11, 15.93, 15.73, 15.51, 15.31, 15.11, 14.92, 14.72, 14.53, 14.33, 14.15},
    {14.12, 13.96, 13.77, 13.59, 13.42, 13.24, 13.06, 12.89, 12.71, 12.55, 12.38},
    {12.36, 12.21, 12.05, 11.89, 11.74, 11.58, 11.42, 11.27, 11.12, 10.97, 10.82},
    {10.80, 10.68, 10.53, 10.38, 10.25, 10.11, 9.98, 9.846, 9.713, 9.581, 9.452}};

#define ROWS 61
#define COLS 11

double interp_z(double x, double y)
{
    if (x < 0 || x > 1.0 || y > 0 || y < -60)
        return 0;

    // x, y 匹配到表格中的坐标系
    double x_idx = x / 0.1;
    double y_idx = -y;

    int x0 = (int)floor(x_idx);
    int y0 = (int)floor(y_idx);

    if (x0 < 0) x0 = 0;
    if (y0 < 0) y0 = 0;
    if (x0 >= COLS) x0 = COLS - 1;
    if (y0 >= ROWS) y0 = ROWS - 1;

    int x1 = x0 + 1;
    int y1 = y0 + 1;

    // 边界保护
    if (x1 >= COLS || y1 >= ROWS)
        return 0;

    double q11 = table[y0][x0];
    double q21 = table[y0][x1];
    double q12 = table[y1][x0];
    double q22 = table[y1][x1];

    double dx = x_idx - x0;
    double dy = y_idx - y0;

    // 双线性插值公式
    double z =
        q11 * (1 - dx) * (1 - dy) +
        q21 * dx * (1 - dy) +
        q12 * (1 - dx) * dy +
        q22 * dx * dy;

    return z;
}

void calculate::calculate_sf6(result &r, param &param_in)
{
    r.Press = param_in.Ms5803Pressure / 10.0;
    r.Tempture = param_in.Sht30Temperature;
    r.RH_f = param_in.Sht30Humidity;
    const double m = (-20 < param_in.Sht30Temperature && param_in.Sht30Temperature < 50) ? 7.591386 : 7.337936;
    const double A = (-20 < param_in.Sht30Temperature && param_in.Sht30Temperature < 50) ? 6.116441 : 6.004918;
    const double Tn = (-20 < param_in.Sht30Temperature && param_in.Sht30Temperature < 50) ? 240.7263 : 229.3975;
    double bao_he_zhen_qi_ya = A * pow(10.0, m * param_in.Sht30Temperature / (param_in.Sht30Temperature + Tn)) / 1000.0;
    double shui_qi_ya = bao_he_zhen_qi_ya * param_in.Sht30Humidity / 100;
    double Sht30Humidity = shui_qi_ya / param_in.Ms5803Pressure;
    double xiang_dui_shi_du_zhen_qi_ya = bao_he_zhen_qi_ya * Sht30Humidity;
    double da_qi_ya_zhen_qi_ya = 1 * xiang_dui_shi_du_zhen_qi_ya;
    double han_shui_liang = Sht30Humidity / 100 * 0.6219907 * bao_he_zhen_qi_ya / (1.01325 - bao_he_zhen_qi_ya);
    r.Point = Tn / (m / log10(da_qi_ya_zhen_qi_ya * 1000 / A) - 1);
    double ya_suo_lu_dian = (243.5 * log((han_shui_liang * 461.519 * param_in.Ms5803Pressure) / ((han_shui_liang * 461.519 + 287)) * 1000 / 6.1112)) / (17.67 - log((han_shui_liang * 461.519 * param_in.Ms5803Pressure) / ((han_shui_liang * 461.519 + 287)) * 1000 / 6.1112));
    double ppmv = bao_he_zhen_qi_ya * Sht30Humidity * 1000000 / param_in.Ms5803Pressure;
    r.PPMS = ppmv;
    // printf("Ludian=%.6f,PPMV=%.6f\n",r.Point,ppmv);
    // 方程系数
    constexpr double Ax = 7.3882e-4;
    constexpr double Ay = -5.132105e-7;
    constexpr double Bx = 2.50695e-3;
    constexpr double By = -2.12283e-6;
    constexpr double R = 5.69502e-4;

    // at^3+bt^2+ct+d=0,密度是三次方程的解t*1000
    double a = 1e9 * (R * (param_in.Sht30Temperature + 273.15) * By - Ay); // 三次项系数*10^9
    double b = 1e6 * (R * (param_in.Sht30Temperature + 273.15) * Bx - Ax); // 二次项系数*10^6
    double c = 1e3 * R * (param_in.Sht30Temperature + 273.15);             // 一次项系数*10^3
    double d = -param_in.SF6_percentage * param_in.Ms5803Pressure;

    // 令t=x-b/3a,将t替换成x-b/3a整理,发现方程不含x^2项
    // 即x^3+px+q=0
    double p = (3 * a * c - b * b) / (3 * a * a);
    double q = (27 * a * a * d - 9 * a * b * c + 2 * b * b * b) / (27 * a * a * a);
    // printf("p=%f,q=%f\n",p,q);
    double delta = pow(q / 2, 2) + pow(p / 3, 3);
    double x = 0, x0 = 0;
    if (delta > 0)
    {
        x = cbrt(-q / 2 + sqrt(delta)) + cbrt(-q / 2 - sqrt(delta));
        x0 = x;
        double _b = -(p / x + q / (x * x));
        double _c = -q / x;

        double x1 = -_b / 2;
        double x2 = sqrt(4 * _c - _b * _b) / 2;
        // printf("x0=%f,x1=%f+%fi,x2=%f-%fi\n",(x0-b/3/a)*1e3,(x1-b/3/a)*1e3,x2*1e3,(x1-b/3/a)*1e3,x2*1e3);
    }
    else
    {
        double r = sqrt(-pow(p / 3, 3));
        double angle = acos(-q / r / 2) / 3;
        double mod = 2 * cbrt(r);
        x0 = mod * cos(angle);
        double x1 = mod * cos(angle + 3.141592653 * 2 / 3);
        double x2 = mod * cos(angle + 3.141592653 * 4 / 3);
        // printf("x0=%e,x1=%e,x2=%e\n",(x0-b/3/a)*1e3,(x1-b/3/a)*1e3,(x2-b/3/a)*1e3);
        if (x1 < x0)
            x0 = x1;
        if (x2 < x0)
            x0 = x2;
    }
    double desity = (x0 - b / 3 / a) * 1e3;
    r.P20_SF6 = (R * (20 + 273.15) * (Bx + By * desity) - (Ax + Ay * desity)) * desity * desity + R * (20 + 273.15) * desity;
    r.P20_N2 = (1 - param_in.SF6_percentage) / param_in.SF6_percentage * r.P20_SF6;
    r.P20_SF6 /= 10.0;
    r.P20_N2 /= 10.0;
    r.P20 = r.P20_SF6 + r.P20_N2;

    float es = 6.112 * exp((17.67 * param_in.Sht30Temperature) / (param_in.Sht30Temperature + 243.5));
    float e = (es * param_in.Sht30Humidity) / 100.0;
    float Td = (243.5 * log(e / 6.112)) / (17.67 - log(e / 6.112));
    r.density = r.Press * 146060 / 8.3144621 / (r.Tempture + 273.15);

    r.PPMS = interp_z(r.Press, Td);
    r.Point = Td;
    // printf("ppm: %.2f\n", r.PPMS);
    // printf("%e,%e,%e,%e,%e,%e,%f,P20=%e\n",a,b,c,d,p,q,desity,r.P20);
    // printf("%e",a*desity*desity*desity/1e9+b*desity*desity/1e6+c*desity/1e3+d);
}