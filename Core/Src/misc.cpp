#include <list>
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include <stm32l4xx_ll_usart.h>
#include <stm32l4xx_ll_rtc.h>

void std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base *const __position) _GLIBCXX_USE_NOEXCEPT
{
    this->_M_next = __position;
    this->_M_prev = __position->_M_prev;
    __position->_M_prev->_M_next = this;
    __position->_M_prev = this;
}

void std::__detail::_List_node_base::_M_unhook() _GLIBCXX_USE_NOEXCEPT
{
    _M_prev->_M_next = this->_M_next;
    _M_next->_M_prev = this->_M_prev;
}

extern "C" void __cxa_pure_virtual()
{
    while (true);
}

void *operator new(size_t size)
{
    return malloc(size);
}

void operator delete(void *obj, unsigned int size)
{
    free(obj);
}

void operator delete(void *obj)
{
    free(obj);
}

extern "C" int _write(int fd, char *ptr, int len)
{
    for (int i = 0; i < len; i++)
    {
        // 把打印信息存储起来
        LL_USART_TransmitData8(USART1, ptr[i]);
        while (!LL_USART_IsActiveFlag_TC(USART1));
    }
    return len;
}

const uint8_t crc16_high_table[] =
    {
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
        0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40};

/* crc16 低位字节值表 */
const uint8_t crc16_low_table[] =
    {
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
        0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
        0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
        0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
        0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
        0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
        0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
        0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
        0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
        0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
        0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
        0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
        0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
        0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
        0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
        0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
        0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
        0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
        0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
        0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
        0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

/**
 * \brief   crc16校验
 * \param   buf 校验buf
 * \param   len 校验长度
 * \return  crc16校验值(如果传入buf包含crc字节，返回0)
 */
uint16_t crc16(uint8_t *buf, uint16_t len)
{
    uint8_t low = 0xFF;
    uint8_t high = 0xFF;
    uint16_t index; /* CRC循环中的索引 */
    while (len--)
    {
        index = low ^ *buf++; /* 计算CRC */
        low = high ^ crc16_high_table[index];
        high = crc16_low_table[index];
    }
    return uint16_t(high) << 8 | uint16_t(low);
}


time_t RTC_Get_Time(tm& time_struct)
{
    uint32_t temp_time = 0;
    temp_time = LL_RTC_DATE_GetYear(RTC);
    temp_time = (uint8_t)(((temp_time >> 4) * 10) + (temp_time & 0x0000000f));
    time_struct.tm_year=(uint8_t)temp_time+100;

    temp_time = LL_RTC_DATE_GetMonth(RTC);
    temp_time = (uint8_t)(((temp_time >> 4) * 10) + (temp_time & 0x0000000f));
    time_struct.tm_mon=(uint8_t)temp_time-1;

    temp_time = LL_RTC_DATE_GetDay(RTC);
    temp_time = (uint8_t)(((temp_time >> 4) * 10) + (temp_time & 0x0000000f));
    time_struct.tm_mday=(uint8_t)temp_time;

    temp_time = LL_RTC_TIME_GetHour(RTC);
    temp_time = (uint8_t)(((temp_time >> 4) * 10) + (temp_time & 0x0000000f));
    time_struct.tm_hour = (uint8_t)temp_time; // 时

    temp_time = LL_RTC_TIME_GetMinute(RTC);
    temp_time = (uint8_t)(((temp_time >> 4) * 10) + (temp_time & 0x0000000f));
    time_struct.tm_min = (uint8_t)temp_time; // 分

    temp_time = LL_RTC_TIME_GetSecond(RTC);
    temp_time = (uint8_t)(((temp_time >> 4) * 10) + (temp_time & 0x0000000f));
    time_struct.tm_sec = (uint8_t)temp_time; // 秒

    printf("RTC_Time:%d-%d-%d %d:%d:%d\n",time_struct.tm_year+1900,time_struct.tm_mon,time_struct.tm_mday,time_struct.tm_hour,time_struct.tm_min,time_struct.tm_sec);//输出闹铃时间
    return mktime(&time_struct);
}

#define RTC_BKP_DATE_TIME_UPDATED ((uint32_t)0x32F2)
void RTC_Set(tm& time_struct)
{
    // LL_RTC_DateTypeDef date={
    //     .Month=uint8_t(time_struct.tm_mon+1),    
    //     .Day=uint8_t(time_struct.tm_mday),            
    //     .Year=uint8_t(time_struct.tm_year-100)
    // };
    // LL_RTC_TimeTypeDef time={
    //     .Hours=uint8_t(time_struct.tm_hour),
    //     .Minutes=uint8_t(time_struct.tm_min),
    //     .Seconds=uint8_t(time_struct.tm_sec)
    // };
    // printf("%d %d %d\n", date.Year,date.Month,date.Day);
    // LL_RTC_DATE_Init(TAMP, LL_RTC_FORMAT_BIN, &date);
    // LL_RTC_TIME_Init(TAMP, LL_RTC_FORMAT_BIN, &time);
    // LL_RTC_BKP_SetRegister(RTC, LL_RTC_BKP_DR0, RTC_BKP_DATE_TIME_UPDATED);
}
#include <stdarg.h>
#include <stdio.h>
#include <string.h>
// 多串口Printf函数
extern "C" void USART_Printf(USART_TypeDef *USARTx, const char *fmt, ...) {
    char buffer[256]={0};
    va_list args;
    va_start(args, fmt);
    vsnprintf(buffer, sizeof(buffer), fmt, args);
    va_end(args);
// 等待上一次传输完成
    while (!LL_USART_IsActiveFlag_TC(USARTx));
    
    for (uint16_t i = 0; buffer[i] != '\0'; i++) {
        LL_USART_TransmitData8(USARTx, buffer[i]);
        while (!LL_USART_IsActiveFlag_TXE(USARTx)); // 等待发送缓冲区空
    }
    
    // 等待传输完全完成
    while (!LL_USART_IsActiveFlag_TC(USARTx));
}